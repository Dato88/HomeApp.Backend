// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HomeAppContext))]
    partial class HomeAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetColumnId")
                        .HasColumnType("integer")
                        .HasColumnName("budget_column_id");

                    b.Property<int>("BudgetGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("budget_group_id");

                    b.Property<int>("BudgetRowId")
                        .HasColumnType("integer")
                        .HasColumnName("budget_row_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 904, DateTimeKind.Utc).AddTicks(7210))
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_budget_cells");

                    b.HasIndex("BudgetColumnId")
                        .HasDatabaseName("ix_budget_cells_budget_column_id");

                    b.HasIndex("BudgetGroupId")
                        .HasDatabaseName("ix_budget_cells_budget_group_id");

                    b.HasIndex("BudgetRowId")
                        .HasDatabaseName("ix_budget_cells_budget_row_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_budget_cells_person_id");

                    b.HasIndex("Year")
                        .HasDatabaseName("ix_budget_cells_year");

                    b.ToTable("BudgetCells", "public");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 905, DateTimeKind.Utc).AddTicks(5870))
                        .HasColumnName("created_at");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_budget_columns");

                    b.HasIndex("Index")
                        .HasDatabaseName("ix_budget_columns_index");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_budget_columns_name");

                    b.ToTable("BudgetColumns", "public");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 905, DateTimeKind.Utc).AddTicks(9520))
                        .HasColumnName("created_at");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("pk_budget_groups");

                    b.HasIndex("Index")
                        .HasDatabaseName("ix_budget_groups_index");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_budget_groups_person_id");

                    b.ToTable("BudgetGroups", "public");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 906, DateTimeKind.Utc).AddTicks(4560))
                        .HasColumnName("created_at");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_budget_rows");

                    b.HasIndex("Index")
                        .HasDatabaseName("ix_budget_rows_index");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_budget_rows_person_id");

                    b.HasIndex("Year")
                        .HasDatabaseName("ix_budget_rows_year");

                    b.ToTable("BudgetRows", "public");
                });

            modelBuilder.Entity("Domain.Entities.People.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 906, DateTimeKind.Utc).AddTicks(9500))
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_people_email");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_people_user_id");

                    b.ToTable("People", "public");
                });

            modelBuilder.Entity("Domain.Entities.Todos.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 907, DateTimeKind.Utc).AddTicks(5160))
                        .HasColumnName("created_at");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean")
                        .HasColumnName("done");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 907, DateTimeKind.Utc).AddTicks(5750))
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.HasKey("Id")
                        .HasName("pk_todos");

                    b.HasIndex("Done")
                        .HasDatabaseName("ix_todos_done");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_todos_id");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("ix_todos_last_modified");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_todos_name");

                    b.HasIndex("Priority")
                        .HasDatabaseName("ix_todos_priority");

                    b.ToTable("Todos", "public");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 908, DateTimeKind.Utc).AddTicks(1860))
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_todo_groups");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_todo_groups_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_todo_groups_name");

                    b.ToTable("TodoGroups", "public");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoGroupTodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 908, DateTimeKind.Utc).AddTicks(6110))
                        .HasColumnName("created_at");

                    b.Property<int>("TodoGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("todo_group_id");

                    b.Property<int>("TodoId")
                        .HasColumnType("integer")
                        .HasColumnName("todo_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_group_todos");

                    b.HasIndex("TodoGroupId")
                        .HasDatabaseName("ix_todo_group_todos_todo_group_id");

                    b.HasIndex("TodoId")
                        .IsUnique()
                        .HasDatabaseName("ix_todo_group_todos_todo_id");

                    b.ToTable("TodoGroupTodos", "public");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 27, 19, 26, 30, 908, DateTimeKind.Utc).AddTicks(9800))
                        .HasColumnName("created_at");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("TodoId")
                        .HasColumnType("integer")
                        .HasColumnName("todo_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_people");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_todo_people_person_id");

                    b.HasIndex("TodoId")
                        .HasDatabaseName("ix_todo_people_todo_id");

                    b.ToTable("TodoPeople", "public");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetCell", b =>
                {
                    b.HasOne("Domain.Entities.Budgets.BudgetColumn", "BudgetColumn")
                        .WithMany("BudgetCells")
                        .HasForeignKey("BudgetColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_cells_budget_columns_budget_column_id");

                    b.HasOne("Domain.Entities.Budgets.BudgetGroup", "BudgetGroup")
                        .WithMany("BudgetCells")
                        .HasForeignKey("BudgetGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_cells_budget_groups_budget_group_id");

                    b.HasOne("Domain.Entities.Budgets.BudgetRow", "BudgetRow")
                        .WithMany("BudgetCells")
                        .HasForeignKey("BudgetRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_cells_budget_rows_budget_row_id");

                    b.HasOne("Domain.Entities.People.Person", "Person")
                        .WithMany("BudgetCells")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_cells_people_person_id");

                    b.Navigation("BudgetColumn");

                    b.Navigation("BudgetGroup");

                    b.Navigation("BudgetRow");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetGroup", b =>
                {
                    b.HasOne("Domain.Entities.People.Person", "Person")
                        .WithMany("BudgetGroups")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_groups_people_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetRow", b =>
                {
                    b.HasOne("Domain.Entities.People.Person", "Person")
                        .WithMany("BudgetRows")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_rows_people_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoGroupTodo", b =>
                {
                    b.HasOne("Domain.Entities.Todos.TodoGroup", "TodoGroup")
                        .WithMany("TodoGroupTodos")
                        .HasForeignKey("TodoGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_group_todos_todo_groups_todo_group_id");

                    b.HasOne("Domain.Entities.Todos.Todo", "Todo")
                        .WithOne("TodoGroupTodo")
                        .HasForeignKey("Domain.Entities.Todos.TodoGroupTodo", "TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_group_todos_todos_todo_id");

                    b.Navigation("Todo");

                    b.Navigation("TodoGroup");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoPerson", b =>
                {
                    b.HasOne("Domain.Entities.People.Person", "Person")
                        .WithMany("TodoPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_people_people_person_id");

                    b.HasOne("Domain.Entities.Todos.Todo", "Todo")
                        .WithMany("TodoPeople")
                        .HasForeignKey("TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_people_todos_todo_id");

                    b.Navigation("Person");

                    b.Navigation("Todo");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetColumn", b =>
                {
                    b.Navigation("BudgetCells");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetGroup", b =>
                {
                    b.Navigation("BudgetCells");
                });

            modelBuilder.Entity("Domain.Entities.Budgets.BudgetRow", b =>
                {
                    b.Navigation("BudgetCells");
                });

            modelBuilder.Entity("Domain.Entities.People.Person", b =>
                {
                    b.Navigation("BudgetCells");

                    b.Navigation("BudgetGroups");

                    b.Navigation("BudgetRows");

                    b.Navigation("TodoPeople");
                });

            modelBuilder.Entity("Domain.Entities.Todos.Todo", b =>
                {
                    b.Navigation("TodoGroupTodo")
                        .IsRequired();

                    b.Navigation("TodoPeople");
                });

            modelBuilder.Entity("Domain.Entities.Todos.TodoGroup", b =>
                {
                    b.Navigation("TodoGroupTodos");
                });
#pragma warning restore 612, 618
        }
    }
}
