name: .NET CI & Docker

on:
  push:
    branches-ignore:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"

jobs:
  build-only:
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/heads/main') }}
    runs-on: ubuntu-latest
    name: Build (non-main branches)
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore ./HomeApp.Backend/HomeApp.Backend.sln
      - name: Build
        run: dotnet build ./HomeApp.Backend/HomeApp.Backend.sln --no-restore

  build-and-test:
    if: ${{ (github.event_name == 'pull_request' && github.event.action != 'closed') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    name: Build & Test (Pull Requests)
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore ./HomeApp.Backend/HomeApp.Backend.sln
      - name: Build
        run: dotnet build ./HomeApp.Backend/HomeApp.Backend.sln --no-restore
      - name: Run All Tests
        run: dotnet test ./HomeApp.Backend/HomeApp.Backend.sln --no-build --verbosity normal

  release-build:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v') && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    name: Build, Test, Docker & Tag (Release â†’ Main)
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore ./HomeApp.Backend/HomeApp.Backend.sln
      - name: Build
        run: dotnet build ./HomeApp.Backend/HomeApp.Backend.sln --no-restore
      - name: Run All Tests
        run: dotnet test ./HomeApp.Backend/HomeApp.Backend.sln --no-build --verbosity normal

      - name: Extract Version from Release Branch Name
        id: extract_version
        run: |
          VERSION="${{ github.event.pull_request.head.ref }}"
          VERSION="${VERSION#release/}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.extract_version.outputs.version }}
          git push origin ${{ steps.extract_version.outputs.version }}

      - name: Prepare Docker tags
        id: docker_tags
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          IMAGE="ghcr.io/${{ github.repository_owner }}/homeapp-backend"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "tag_latest=${IMAGE}:latest" >> $GITHUB_OUTPUT
          echo "tag_version=${IMAGE}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ steps.docker_tags.outputs.tag_latest }} \
            -t ${{ steps.docker_tags.outputs.tag_version }} \
            -f ./HomeApp.Backend/Web.Api/Dockerfile ./HomeApp.Backend

      - name: Push Docker image
        run: |
          docker push ${{ steps.docker_tags.outputs.tag_latest }}
          docker push ${{ steps.docker_tags.outputs.tag_version }}

  create-release:
    name: Create GitHub Release
    needs: release-build
    runs-on: ubuntu-latest
    if: ${{ needs.release-build.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-build.outputs.version }}
          generate_release_notes: true
